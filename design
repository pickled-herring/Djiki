DJIKI PROJECT DESIGN

FIRST STAGE
	First stage is simple, perhaps the most simplest:

	Make a webapp with 2 sites: index & edit

	edit gives you a form that you can use to change the index content.
	That's it.  See templates and views and forms from django

SECOND STAGE

	There are several jobs that need doing before moving to the second
	stage. Firstly, You will need to start writing test, or at least learn
	how to write tests so we can be sure that our project is secure and
	robust and whatever. Secondly you need to start keeping track of the
	changes to the project. Create a git repository.

	Feature wise, I want to add change tracking. This might mean adding
	another python package.

	Secondly, We need to change the model. Currently, the only table in the
	database is the content table. If we're gonna keep track of changes we
	need to have a second table that stores the edits. Those edits have a
	foreign key pointing to the page that was changed, the change (a diff?
	a previous version?), the time of the edit and any notes about the
	edit. The content table itself needs to be updated. Each row represents
	a page and each page is going to need to have a title and the body text
	at least.

	I need to figure out how to format plain text into html too. This
	problem shouldn't be too hard since it's pretty detached from the whole
	system, but still.

	We're still on the pilot version of this software. I want to keep this
	as clean as possible. Or at least as professional as possible.

	in sum:
	For the orm:
		Content:
		  + Title
		  + body text
		  ? last edit

		Edits:
		  + Content object (foreign key)
		  + the change
		  + date
		  + notes
		  ? contact

	We'll work with 1 page first before creating entire wiki. We need
	multiple pages first if we're gonna work with auto link generation.

    Testing.

	How do we test software? What does software need to be secure and
	robust? I don't want to just write tests like shots in the dark. I need
	100% coverage of code. The test need to test all possible combinations
	of arguments I throw at the system. They also need to test for
	correctness.

	Right now I have index and edit submit. So i need to check that edit
	works, submit works and index works. That would be if I had the first
	stage. What about the second stage?

	The second stage should have index, edit, list_edits, submit. Its
	models consists of content and changes. I need to make sure index,
	edit, list_edits, and submit when run dont return errors, or return the
	right errors. I need to runchecks on the models to make sure they work,
	that I can create, edit and whatever.

    Design Considerations

	Actually would it be preferrable to do arbitrary number of pages first
	and then change tracking later? What are the pros and cons?

	Writing tests might be easier later. Since we've scaled up to arbitrary
	number of pages. Already anyway. Also how would you test change
	tracking anyway?

	The models will be less complex if it were just multiple pages and
	index, since it's only one table. We're gonna have to worry about the
	edit table later anyway. So what do we do?

STAGE 3

	Clean up
	Change tracking
	Independent front page
	text to html
	auto link generation

	I'd say we're still in our pilot version and not in official yet. But
	who knows. For now let's focus on 2 things: clean up and an independent
	front page

    Independent home page:
	A terrible idea, it introduces special cases.

    Text to Html
	What should I use? Right now changing new line to <br> might just be enough.
	images and links will be a bit harder how should I consider it?

    Auto link generation.

	Here I've put documentation preperation to its own module. There are
	many ways to go from here. We can choose what we use to develop text to
	html, link generation and further stuffs.
